package com.security.cryptoutility;


import javax.crypto.SecretKey;

/**
 * CryptoServices provides basic cryptographic functionality. This interface defines methods that will be used by the
 * Encryptor and Decryptor classes
 *
 * @author  Raghav S
 * @version 1.0
 * @since   2016-06-06
 */
interface CryptoServices {

    /**
     * Defines crypto mode of operation for the instance
     */
    public enum CryptoOperationMode{
        ENCRYPT, DECRYPT, BOTH;
    }

    /**
     * Initializes the crypto services engine
     * @param cryptoOperationMode mode 
     * @throws EDUSException
     */
    public void initialize(CryptoOperationMode cryptoOperationMode) throws EDUSException;

    // Get the crypto policy of this instance of the CryptoServices
    public CryptoPolicy getCryptoPolicy();

    // Encrypts data with a random key generated by the implementation. The generated key is returned along with the cipher and iv
    public CipherData encryptWithRandomKey(byte[] data) throws EDUSException;

    // Encrypts data with the key provided
    public CipherData encryptWithKey(SecretKey secretKey, byte[] data) throws EDUSException;

    // Decrypts data with the key provided
    public byte[] decryptWithKey(CipherData cipherData) throws EDUSException;

    // Return encrypted key as String of format [ bas64(iv) : base64(encrypted key) ]
    public String encryptKey(SecretKey secretKey, byte[] keyblob) throws EDUSException;

    // Return decrypted key from String of format [ base64(iv) : base64(encrypted key) ]
    public SecretKey decryptKey(SecretKey secretKey, String encryptedKeyString) throws EDUSException;

    // Computes mac with a random key generated by the implementation. The generated key is returned along with the computed mac
    public IntegrityData computeMacWithRandomKey(byte[] dataToMac) throws EDUSException;

    // Computes mac with the key provided
    public IntegrityData computeMac(SecretKey integrityKey, byte[] dataToMac) throws EDUSException;

    // Verify mac
    public boolean verifyMac(IntegrityData integrityData, byte[] dataToMac) throws EDUSException;

    // Uninitialize
    public void uninitialize() throws EDUSException;

}
