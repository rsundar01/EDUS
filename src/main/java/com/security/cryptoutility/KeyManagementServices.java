package com.security.cryptoutility;


import java.util.List;

/**
 * Created by Raghav S on 7/1/16.
 */

interface KeyManagementServices {

    // Initialize Instance. Must be called before any other method is called
    public void initialize() throws EDUSException;

    // Get key management policy of this instance
    public KeyManagementPolicy getKeyManagementPolicy();

    // Generates cryptographic key in the key management system
    public boolean generateKey(String keyID) throws EDUSException;

    // Creates a new version of key in the key management system
    public boolean updateKey(String keyID) throws EDUSException;

    // Return key bits as byte array
    public byte[] getKeyBytes(String keyID) throws EDUSException;

    // Return seed bytes generated by the underlying key management system
    public byte[] getSeed(int size) throws EDUSException;

    // Return random bytes generated by the underlying key management system
    public byte[] getRandomBytes(int size) throws EDUSException;

    // Encrypt byteArray using latest version of the key specified by KeyID
    public String encrypt(String keyId, byte[] blob) throws EDUSException;

    // Encrypt byteArray using latest version of the key specified by KeyID
    public String encryptWithVersion(String keyId, byte[] blob, int version) throws EDUSException;

    // Decrypt data string with latest version of the key specified by KeyID
    public byte[] decrypt(String keyId, String encryptedKeyString) throws EDUSException;

    // Decrypt data string with latest version of the key specified by KeyID
    public byte[] decryptWithVersion(String keyId, String encryptedString, int version) throws EDUSException;

    // Get the instance key management system type
    public KeyManagementPolicy.KeyManagementSystem getKeyManagementSystem() throws EDUSException;

    // Initializes a key pool with a list of keys. Throws EDUSException if operation failed
    public void loadKeyList(List<String> keyList) throws EDUSException;

    // Generates keys provided in the list and initializes a local key pool with the list.
    // Throws exception if operation failed
    public void generateKeyList(List<String> keyList) throws EDUSException;

    // Create new versions of keys in the kek list
    // Throws EDUSException if operation failed
    public void updateKeyList() throws EDUSException;

    // Spit out a random key id from the list. Returns null if kek list is null.
    public String getRandomKeyIDFromList() throws EDUSException;
}
